// Generated by CoffeeScript 1.6.2
(function() {
  var AudioLoader, Event, Simon, SimonUI, delay;

  Event = (function() {
    function Event(name) {
      this.name = name;
      this.listeners = [];
    }

    Event.prototype.subscribe = function(callback) {
      return this.listeners.push(callback);
    };

    Event.prototype.fire = function() {
      var listener, _i, _len, _ref, _results;

      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        _results.push(listener());
      }
      return _results;
    };

    return Event;

  })();

  AudioLoader = (function() {
    var readyCallback;

    readyCallback = null;

    function AudioLoader() {
      this.filesToLoad = 0;
      this.filesLoaded = 0;
      this.audios = {};
    }

    AudioLoader.prototype.load = function(uri) {
      var audio, callback, self;

      self = this;
      audio = new Audio();
      callback = function() {
        self.filesLoaded++;
        return self.checkReady();
      };
      audio.addEventListener('canplaythrough', callback, false);
      audio.src = uri;
      return this.audios[uri] = audio;
    };

    AudioLoader.prototype.get = function(uri) {
      return this.audios[uri];
    };

    AudioLoader.prototype.checkReady = function() {
      if (this.filesToLoad === this.filesLoaded) {
        if (readyCallback) {
          readyCallback();
          return readyCallback = null;
        }
      }
    };

    AudioLoader.prototype.ready = function(callback) {
      readyCallback = callback;
      return this.checkReady();
    };

    return AudioLoader;

  })();

  delay = function(ms, func) {
    return setTimeout(func, ms);
  };

  Simon = (function() {
    function Simon(btnCount) {
      this.btnCount = btnCount;
      this.wrongButton = new Event('wrongButton');
      this.correctButton = new Event('correctButton');
      this.patternComplete = new Event('patternComplete');
      this.pattern = [];
      this.userPattern = [];
    }

    Simon.prototype.start = function() {
      this.pattern = [];
      this.userPattern = [];
      return this.next();
    };

    Simon.prototype.next = function() {
      this.userPattern = [];
      return this.pattern.push(parseInt(Math.random() * this.btnCount));
    };

    Simon.prototype.handleButtonPress = function(btnNum) {
      this.userPattern.push(btnNum);
      if (this.userPattern[this.userPattern.length - 1] === this.pattern[this.userPattern.length - 1]) {
        if (this.userPattern.length === this.pattern.length) {
          this.next();
          return this.patternComplete.fire();
        } else {
          return this.correctButton.fire();
        }
      } else {
        return this.wrongButton.fire();
      }
    };

    return Simon;

  })();

  SimonUI = (function() {
    function SimonUI(buttons, game) {
      var button, idx, _i, _len, _ref;

      this.buttons = buttons;
      this.game = game;
      _ref = this.buttons;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        button = _ref[idx];
        $(button).data('button-num', idx);
      }
      this._initListeners();
      this._loadAudio();
    }

    SimonUI.prototype._initListeners = function() {
      var self;

      self = this;
      this.buttons.on('click', function(evt) {
        var btnNum;

        evt.preventDefault();
        btnNum = $(this).data('button-num');
        return self.game.handleButtonPress(btnNum);
      });
      this.buttons.on('mousedown', function() {
        var btnNum;

        btnNum = $(this).data('button-num');
        return self.playButtonSound(btnNum);
      });
      this.buttons.on('mouseup', function() {
        var btnNum;

        btnNum = $(this).data('button-num');
        return self.stopButtonSound(btnNum);
      });
      this.game.wrongButton.subscribe(function() {
        return self.handleWrongButton();
      });
      return this.game.patternComplete.subscribe(function() {
        return self.handlePatternComplete();
      });
    };

    SimonUI.prototype._loadAudio = function() {
      var btnNum, button, _i, _len, _ref, _results;

      this.audioLoader = new AudioLoader();
      _ref = this.buttons;
      _results = [];
      for (btnNum = _i = 0, _len = _ref.length; _i < _len; btnNum = ++_i) {
        button = _ref[btnNum];
        _results.push(this.audioLoader.load(this._getButtonSoundUri(btnNum)));
      }
      return _results;
    };

    SimonUI.prototype._getButtonSoundUri = function(btnNum) {
      return "sounds/btn" + (btnNum + 1) + ".wav";
    };

    SimonUI.prototype.start = function() {
      this.game.start();
      return this.demoPattern(this.game.pattern);
    };

    SimonUI.prototype.handleButtonPress = function(btnNum) {
      return this.game.handleButtonPress(btnNum);
    };

    SimonUI.prototype.handleWrongButton = function() {
      return console.log('wrong button');
    };

    SimonUI.prototype.handleCorrectButton = function() {
      return console.log('correct');
    };

    SimonUI.prototype.handlePatternComplete = function() {
      console.log('pattern complete');
      return this.demoPattern(this.game.pattern);
    };

    SimonUI.prototype.demoPattern = function(pattern) {
      var doIt, self;

      self = this;
      doIt = function(patternCopy) {
        return self.simulateButton(patternCopy.shift(), function() {
          if (patternCopy.length) {
            return delay(200, function() {
              return doIt(patternCopy);
            });
          }
        });
      };
      delay(1000, function() {
        return doIt(pattern.slice(0));
      });
      return console.log("next pattern is " + pattern);
    };

    SimonUI.prototype.simulateButton = function(btnNum, callback) {
      var $btn;

      $btn = $(this.buttons[btnNum]);
      $btn.addClass('hover');
      this.playButtonSound(btnNum);
      return delay(500, function() {
        $btn.removeClass('hover');
        return callback();
      });
    };

    SimonUI.prototype.playButtonSound = function(btnNum) {
      var audio;

      audio = this.audioLoader.get(this._getButtonSoundUri(btnNum));
      audio.currentTime = 0;
      return audio.play();
    };

    SimonUI.prototype.stopButtonSound = function(btnNum) {
      var audio;

      audio = this.audioLoader.get(this._getButtonSoundUri(btnNum));
      return delay(200, function() {
        return audio.pause();
      });
    };

    return SimonUI;

  })();

  $(function() {
    var $buttons, simon, simonUI;

    $buttons = $('.simon-button');
    simon = new Simon($buttons.length);
    simonUI = new SimonUI($buttons, simon);
    return simonUI.start();
  });

}).call(this);
